{"version":3,"sources":["resource/icon_320x320.png","Welcome.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","props","state","username","password","newPassword","confirmPassword","change","handleUsernameChange","bind","handlePasswordChange","handleNewPasswordChange","handleConfirmPasswordChange","handleChangeMode","handleSubmit","event","this","setState","target","value","preventDefault","sha256","require","hashOfPassword","axios","hashOfNewPassword","url","queryUrlRoot","encodeURIComponent","get","then","response","data","catch","error","console","log","login","token","permissions","className","src","logo","alt","onSubmit","type","placeholder","onChange","autoFocus","required","onClick","title","React","Component","Dashboard","healthy","symptomatic","confirmedDiagnosis","handleUpdateInfectionData","handleUpdateSummary","parseInt","status","logout","color","lineWidth","label","dataEntry","Math","round","percentage","labelStyle","index","fill","fontSize","fontFamily","labelPosition","defaultState","mode","App","JSON","parse","stringify","refresh","refreshTime","document","addEventListener","handleKeyPress","removeEventListener","finally","factoryDefaultState","currentTime","Date","getTime","Boolean","window","location","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cafd4ef3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon_320x320.a641225f.png\";","import React from \"react\";\nimport \"./resource/Common.css\";\nimport \"./resource/Welcome.css\";\nimport logo from \"./resource/icon_320x320.png\";\nimport {queryUrlRoot} from \"./Constants\";\n\nclass Welcome extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            newPassword: \"\",\n            confirmPassword: \"\",\n            change: false\n        };\n\n\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.handleNewPasswordChange = this.handleNewPasswordChange.bind(this);\n        this.handleConfirmPasswordChange = this.handleConfirmPasswordChange.bind(this);\n        this.handleChangeMode = this.handleChangeMode.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleUsernameChange(event) {\n        this.setState({username: event.target.value});\n    }\n\n    handlePasswordChange(event) {\n        this.setState({password: event.target.value});\n    }\n\n    handleNewPasswordChange(event) {\n        this.setState({newPassword: event.target.value});\n    }\n\n    handleConfirmPasswordChange(event) {\n        this.setState({confirmPassword: event.target.value});\n    }\n\n    handleChangeMode() {\n        this.setState({change: !this.state.change});\n    }\n\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const sha256 = require(\"js-sha256\").sha256;\n        const hashOfPassword = sha256(this.state.password);\n        const axios = require(\"axios\");\n\n        if (this.state.change) {\n            if (this.state.newPassword === this.state.confirmPassword) {\n                const hashOfNewPassword = sha256(this.state.newPassword);\n                const url = queryUrlRoot + \"session?\"\n                    + \"function=change\"\n                    + \"&user=\" + encodeURIComponent(this.state.username)\n                    + \"&password=\" + hashOfPassword\n                    + \"&newpassword=\" + hashOfNewPassword;\n                axios.get(url).then(response => {\n                    if (response.data) {\n                        this.setState({\n                            change: false,\n                            password: \"\",\n                            newPassword: \"\",\n                            confirmPassword: \"\"\n                        });\n                    } else {\n                        this.setState({\n                            password: \"\",\n                            newPassword: \"\",\n                            confirmPassword: \"\"\n                        });\n                    }\n                }).catch(error => {\n                    console.log(error);\n                    this.setState({\n                        password: \"\",\n                        newPassword: \"\",\n                        confirmPassword: \"\"\n                    });\n                });\n            } else {\n                this.setState({\n                    confirmPassword: \"\"\n                })\n            }\n        } else {\n            const url = queryUrlRoot + \"session?\"\n                + \"function=login\"\n                + \"&user=\" + encodeURIComponent(this.state.username)\n                + \"&password=\" + hashOfPassword;\n            axios.get(url).then(response => {\n                if (response.data) {\n                    this.props.login(this.state.username, response.data.token, response.data.permissions);\n                } else {\n                    this.setState({\n                        password: \"\",\n                        newPassword: \"\",\n                        confirmPassword: \"\"\n                    });\n                }\n            }).catch(error => {\n                console.log(error);\n            });\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"welcome\">\n                <img className=\"welcome-logo\" src={logo} alt=\"Logo\"/>\n                <form className=\"welcome-form\" onSubmit={this.handleSubmit}>\n                    <input className=\"welcome-form-username\"\n                           type=\"text\" value={this.state.username}\n                           placeholder=\"Username\"\n                           onChange={this.handleUsernameChange} autoFocus/>\n                    <input className=\"welcome-form-password\"\n                           type=\"password\" value={this.state.password}\n                           placeholder={this.state.change ? \"Old password\" : \"Password\"}\n                           onChange={this.handlePasswordChange} required\n                    />\n                    {this.state.change &&\n                    <input className=\"welcome-form-password\"\n                           type=\"password\" value={this.state.newPassword}\n                           placeholder=\"New password\"\n                           onChange={this.handleNewPasswordChange}\n                        //pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n                        //title=\"Password must be at least 8 characters and contain at least one number, one uppercase letter and one lowercase letter\"\n                           required/>\n                    }\n                    {this.state.change &&\n                    <input className=\"welcome-form-password\"\n                           type=\"password\" value={this.state.confirmPassword}\n                           placeholder=\"Confirm password\"\n                           onChange={this.handleConfirmPasswordChange}\n                           required/>\n                    }\n                    <input className=\"welcome-form-submit\"\n                           type=\"submit\" value={this.state.change ? \"Change password\" : \"Log in\"}/>\n                </form>\n                <a className=\"welcome-change-mode clickable\"\n                   onClick={this.handleChangeMode}\n                   title={this.state.change ? \"Switch to user log in mode\" : \"Switch to change user password mode\"}\n                >{this.state.change ? \"Log in\" : \"Change password\"}</a>\n            </div>\n        );\n    }\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport {PieChart} from 'react-minimal-pie-chart';\nimport \"./resource/Common.css\";\nimport \"./resource/Dashboard.css\";\nimport {queryUrlRoot} from \"./Constants\";\n\nclass Dashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            healthy: 0,\n            symptomatic: 0,\n            confirmedDiagnosis: 0\n        };\n\n        this.handleUpdateInfectionData = this.handleUpdateInfectionData.bind(this);\n        this.handleUpdateSummary = this.handleUpdateSummary.bind(this);\n    }\n\n    componentWillMount() {\n        this.handleUpdateSummary();\n    }\n\n    handleUpdateInfectionData() {\n        const axios = require(\"axios\");\n        const token = this.props.token;\n\n        const url = queryUrlRoot + \"control?command=infectionData\"\n            + \"&token=\" + encodeURIComponent(token);\n        axios.get(url).then(response => {\n            if (response.data) {\n                console.log(\"updateInfectionData successful\");\n            }\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    handleUpdateSummary() {\n        const axios = require(\"axios\");\n        const token = this.props.token;\n\n        const url = queryUrlRoot + \"control?command=summary\"\n            + \"&token=\" + encodeURIComponent(token);\n        axios.get(url).then(response => {\n            if (response.data) {\n                console.log(\"updateSummary successful\");\n                console.log(response.data);\n                const data = {\n                    healthy: parseInt(response.data.status.healthy),\n                    symptomatic: parseInt(response.data.status.symptomatic),\n                    confirmedDiagnosis: parseInt(response.data.status.confirmedDiagnosis)\n                };\n                console.log(data);\n                this.setState(data);\n            }\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    render() {\n        const logout = this.props.logout;\n        const status = this.state;\n\n        const data = [\n            {title: 'Healthy', value: status.healthy, color: '#34c759'},\n            {title: 'Symptomatic', value: status.symptomatic, color: '#ff9500'},\n            {title: 'Confirmed', value: status.confirmedDiagnosis, color: '#ff3b30'}\n        ];\n\n        return (\n            <div className=\"dashboard\">\n                <div className=\"dashboard-piechart\">\n                    <PieChart\n                        lineWidth={15}\n                        label={({dataEntry}) => Math.round(dataEntry.percentage) + '% (' + dataEntry.value + ')'}\n                        labelStyle={(index) => ({\n                            fill: data[index].color,\n                            fontSize: '4px',\n                            fontFamily: 'sans-serif',\n                        })}\n                        labelPosition={80}\n                        data={data}/>\n                </div>\n                <div className=\"dashboard-functions\">\n                    <div className=\"dashboard-functions-function clickable\"\n                         onClick={this.handleUpdateInfectionData}>UPDATE\n                    </div>\n                    <div className=\"dashboard-functions-function clickable\" onClick={this.handleUpdateSummary}>REFRESH\n                    </div>\n                    <div className=\"dashboard-functions-function clickable\" onClick={logout}>LOGOUT</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React, {Component} from \"react\";\nimport Welcome from \"./Welcome\";\nimport {queryUrlRoot} from \"./Constants\";\nimport Dashboard from \"./Dashboard\";\n\nconst defaultState = {\n    mode: \"welcome\",\n    username: \"\",\n    token: \"\",\n    permissions: []\n};\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = JSON.parse(JSON.stringify(defaultState));\n\n        this.setState = this.setState.bind(this);\n        this.login = this.login.bind(this);\n        this.logout = this.logout.bind(this);\n        this.refresh = this.refresh.bind(this);\n        this.refreshTime = 0;\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    login(username, token, permissions) {\n        if (token) {\n            this.setState({\n                mode: \"dashboard\",\n                username: username,\n                permissions: permissions,\n                token: token\n            })\n        }\n    }\n\n    logout() {\n        let url = queryUrlRoot + \"session?\"\n            + \"function=logout\"\n            + \"&token=\" + this.state.token;\n\n        // GET using AXIOS\n        const axios = require(\"axios\");\n        axios.get(url).then(response => {\n            if (parseInt(response.status, 10) === 200) {\n                console.log(\"Log out successful\");\n            } else {\n                console.log(\"Log out failed due to timeout\");\n            }\n        }).catch(error => {\n            console.log(\"Log out failed due to \" + error);\n        }).finally(() => {\n            const factoryDefaultState = JSON.parse(JSON.stringify(defaultState));\n            this.setState(factoryDefaultState);\n        })\n    }\n\n    refresh() {\n        const currentTime = new Date().getTime();\n        if (this.state.token && currentTime > this.refreshTime) {\n            let url = queryUrlRoot + \"session?\"\n                + \"function=refresh\"\n                + \"&token=\" + this.state.token;\n\n            const axios = require(\"axios\");\n            axios.get(url).then(response => {\n                if (parseInt(response.status, 10) === 200) {\n                    // Refresh up to once per minute to avoid too many refresh calls\n                    this.refreshTime = currentTime + 60000;\n                } else {\n                    console.log(\"Refresh failed due to timeout\");\n                }\n            }).catch(error => {\n                console.log(\"Refresh failed due to \" + error);\n            });\n        }\n    }\n\n    render() {\n        switch (this.state.mode) {\n            case \"dashboard\":\n                return <Dashboard\n                    username={this.state.username}\n                    token={this.state.token}\n                    refresh={this.refresh}\n                    logout={this.logout}/>;\n            default:\n                return <Welcome\n                    state={this.state}\n                    login={this.login}/>;\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router basename={'admin'}>\n        <App />\n    </Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}